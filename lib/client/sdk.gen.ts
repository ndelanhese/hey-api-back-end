// This file is auto-generated by @hey-api/openapi-ts

import type {
  Options as ClientOptions,
  TDataShape,
  Client,
} from '@hey-api/client-fetch';
import type {
  GetCatsData,
  GetCatsResponse,
  CreateCatData,
  CreateCatResponse,
  DeleteCatData,
  DeleteCatResponse,
  GetCatsByIdData,
  GetCatsByIdResponse,
  UpdateCatData,
  UpdateCatResponse,
} from './types.gen';
import {
  zGetCatsResponse,
  zCreateCatResponse,
  zDeleteCatResponse,
  zGetCatsByIdResponse,
  zUpdateCatResponse,
} from './zod.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Get all cats
 * This action returns all cats
 */
export const getCats = <ThrowOnError extends boolean = false>(
  options: Options<GetCatsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetCatsResponse,
    unknown,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zGetCatsResponse.parseAsync(data);
    },
    url: '/',
    ...options,
  });
};

export const createCat = <ThrowOnError extends boolean = false>(
  options: Options<CreateCatData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateCatResponse,
    unknown,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zCreateCatResponse.parseAsync(data);
    },
    url: '/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const deleteCat = <ThrowOnError extends boolean = false>(
  options: Options<DeleteCatData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteCatResponse,
    unknown,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zDeleteCatResponse.parseAsync(data);
    },
    url: '/{id}',
    ...options,
  });
};

export const getCatsById = <ThrowOnError extends boolean = false>(
  options: Options<GetCatsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetCatsByIdResponse,
    unknown,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zGetCatsByIdResponse.parseAsync(data);
    },
    url: '/{id}',
    ...options,
  });
};

export const updateCat = <ThrowOnError extends boolean = false>(
  options: Options<UpdateCatData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateCatResponse,
    unknown,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zUpdateCatResponse.parseAsync(data);
    },
    url: '/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};
