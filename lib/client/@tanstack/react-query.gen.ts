// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  getCats,
  createCat,
  deleteCat,
  getCatsById,
  updateCat,
} from '../sdk.gen';
import {
  queryOptions,
  type UseMutationOptions,
  type DefaultError,
} from '@tanstack/react-query';
import type {
  GetCatsData,
  CreateCatData,
  CreateCatResponse,
  DeleteCatData,
  DeleteCatResponse,
  GetCatsByIdData,
  UpdateCatData,
  UpdateCatResponse,
} from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const getCatsQueryKey = (options: Options<GetCatsData>) =>
  createQueryKey('getCats', options);

export const getCatsOptions = (options: Options<GetCatsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getCats({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getCatsQueryKey(options),
  });
};

export const createCatQueryKey = (options: Options<CreateCatData>) =>
  createQueryKey('createCat', options);

export const createCatOptions = (options: Options<CreateCatData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createCat({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createCatQueryKey(options),
  });
};

export const createCatMutation = (
  options?: Partial<Options<CreateCatData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateCatResponse,
    DefaultError,
    Options<CreateCatData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createCat({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteCatMutation = (
  options?: Partial<Options<DeleteCatData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteCatResponse,
    DefaultError,
    Options<DeleteCatData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteCat({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getCatsByIdQueryKey = (options: Options<GetCatsByIdData>) =>
  createQueryKey('getCatsById', options);

export const getCatsByIdOptions = (options: Options<GetCatsByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getCatsById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getCatsByIdQueryKey(options),
  });
};

export const updateCatMutation = (
  options?: Partial<Options<UpdateCatData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateCatResponse,
    DefaultError,
    Options<UpdateCatData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateCat({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
